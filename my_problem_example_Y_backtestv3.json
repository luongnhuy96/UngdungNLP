{
  "name": "Backtest Strategy Analysis Problem",
  "description": "The backtest function simulates the execution of a trading strategy using historical stock data. Function Definition:\nDefine a function named backtest that takes three parameters: data, initial_capital, and shares_per_signal. This function simulates a trading strategy using historical stock data.\n\nInitialization:\nInitialize two variables:\ncapital: Set it to the value of initial_capital, representing the initial amount of capital available for trading.\nshares_held: Initialize it to 0, representing the number of shares currently held in the portfolio.\n\nDetermine Buying and Selling Positions:\nAdd two new columns to the DataFrame data:\n-Position_Buy: Shift the values of the Buy_Signal column.\n-Position_Sell: Shift the values of the Sell_Signal column. \nAdd additional columns to the DataFrame data to track trade actions, capital, and shares held:\n-Trade_Action: Initialize it as an empty string.\n-Capital: Initialize it with the initial capital value.\n-Shares_Held: Initialize it with the initial shares held value.\n\nIterate Through Each Row:\nIterate through each row in the DataFrame data using a for loop.\nIterate Through Each Row:\n- Loop through each row in the DataFrame data using the iterrows() method, which iterates over the DataFrame yielding index and row data for each iteration.\n- Utilize a for loop to iterate through each row, where index represents the index of the row and row contains the data for that row.\nCheck Trade Conditions:\n- Within the loop, evaluate conditions to determine trade actions based on the signals and available capital:\nCheck if there's a buy signal (Position_Buy equals 1), sufficient capital to buy (capital >= row['Close'] * shares_per_signal), and if no trade action has been taken yet (row['Trade_Action'] == '').\nCheck if there's a sell signal (Position_Sell equals 1), if shares are held (shares_held > 0), and if no trade action has been taken yet (row['Trade_Action'] == '').\n-If the conditions are met, execute the corresponding trade action:\n-If it's a buy signal, mark the trade action as 'Buy', deduct the cost from the capital, update the number of shares held, and record these changes in the DataFrame.\n-If it's a sell signal, mark the trade action as 'Sell', calculate the proceeds from selling the shares, reset the number of shares held to 0, and update the capital accordingly.\n-If none of the conditions are met, update the capital and shares held based on the current values.\nUpdate Current Value:\n- Calculate the current value of the portfolio (current_value) based on the available capital and the value of shares held at the current closing price.\n- Update current_value in each iteration based on changes in capital and shares held.\n\nPrint Summary Statistics:\nPrint summary statistics including the first entry date, total profit, total account value, market return, and strategy return.\n we're printing summary statistics related to a trading strategy backtest. Here's a breakdown:\nFirst Entry Date Calculation:We find the first entry date (first_entry_date) by locating the earliest index where there is a buy signal in the DataFrame.\nProfit, Market Return, and Strategy Return Calculation:\nCalculate the total profit (profit) by subtracting the initial capital from the current value.\nDetermine the market return (market_return) by calculating the percentage change in the closing price from the first date to the last date.\nCompute the strategy return (strategy_return) by dividing the total profit by the initial capital.\nPrint Summary Statistics:Print out the calculated statistics, including the first entry date, total profit, market return, and strategy return.\n\nCalculate Returns:\nCalculate Market Returns: \n-Calculate the percentage change in closing prices ('Close') using the pct_change() function provided by pandas. This computes the daily returns of the market.\n-Assign the calculated market returns to a new column named 'Market_Return' in the DataFrame data.\nCalculate Cumulative Market Returns:\nCalculate the cumulative returns of the market by applying the formula: The formula calculates the cumulative return over a certain number of days by compounding the daily return. It first adds 1 to the daily return, then raises this value to the power of the number of days. Finally, it subtracts 1 from the result to obtain the cumulative return.\nThis formula calculates the total return over the entire period, assuming that all returns are reinvested.\nUse the cumprod() function to compute the cumulative product of the market returns plus 1.\nSubtract 1 from the cumulative product to obtain the total cumulative return.\nStore the cumulative returns in a new column named 'Cumulative_Market_Returns' in the DataFrame data.\nCalculate Strategy Returns:\n-Calculate the value of the trading strategy ('Strategy_Value') at each time step.\n-This value is computed by adding the current capital ('Capital') to the product of the number of shares held ('Shares_Held') and the closing price ('Close').\n-Store the calculated strategy values in a new column named 'Strategy_Value' in the DataFrame data.\nCalculate Cumulative Strategy Returns:\n- Calculate the cumulative returns of the trading strategy by dividing the 'Strategy_Value' by the initial capital (initial_capital).\n- Store the cumulative strategy returns in a new column named 'Cumulative_Strategy_Returns' in the DataFrame data.\n\nReturn Updated DataFrame:\nReturn the updated DataFrame data with the newly added columns reflecting the trading positions and account information.\n\n \n\nExample\n\nInput\n\n\nDatetime | Close | SMA | MACD | Signal_Line | Buy_Signal | Sell_Signal \n2020-09-29 | 56139.660156 | 55598.836328 | 399.610464 | 217.459838 | True | False\n\n\n\nOutput\n\nNgay vao lenh dau tien: 2020-11-13 00:00:00 \nTong loi nhuan: 8460770.703125\nTong gia tri tai khoan: 108460770.703125\nLoi nhuan thi truong: 16.981139933980433%\nLoi nhuan chien luoc: 8.460770703125%\n\n\nNote\n\nThe following illustrates the first example.\n\n",
  
  
  "public_tests": {
    "input": [
      "Datetime | Close | SMA | MACD | Signal_Line | Buy_Signal | Sell_Signal \n2020-09-29 | 56139.660156 | 55598.836328 | 399.610464 | 217.459838 | True | False\n"
    ],
    "is_valid_test": null,
    "output": [
      "Ngay vao lenh dau tien: 2020-11-13 00:00:00 \nTong loi nhuan: 8460770.703125\nTong gia tri tai khoan: 108460770.703125\nLoi nhuan thi truong: 16.981139933980433%\nLoi nhuan chien luoc: 8.460770703125%\n"
    ]
  },
  "private_tests": {
    "input": [],
    "is_valid_test": null,
    "output": []
  }
  
}